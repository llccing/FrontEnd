(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{495:function(e,a,t){"use strict";t.r(a);var s=t(14),r=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"result"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#result"}},[e._v("#")]),e._v(" Result")]),e._v(" "),a("p",[e._v("Correct rate: 74% pass(more than 70%)\ntime: 1h 26 mins\ncorrect questions: 48/65")]),e._v(" "),a("h2",{attrs:{id:"_1-17-approximatenumberofmessages-sqs-queue-attribute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-approximatenumberofmessages-sqs-queue-attribute"}},[e._v("#")]),e._v(" 1/17 ApproximateNumberOfMessages SQS queue attribute.")]),e._v(" "),a("p",[e._v("For example, suppose that you have a web app that lets users upload images and use them online. In this scenario, each image requires resizing and encoding before it can be published. The app runs on EC2 instances in an Auto Scaling group, and it's configured to handle your typical upload rates. Unhealthy instances are terminated and replaced to maintain current instance levels at all times. The app places the raw bitmap data of the images in an SQS queue for processing. It processes the images and then publishes the processed images where they can be viewed by users. The architecture for this scenario works well if the number of image uploads doesn't vary over time. But if the number of uploads changes over time, you might consider using dynamic scaling to scale the capacity of your Auto Scaling group.")]),e._v(" "),a("p",[e._v("Backlog per instance: To calculate your backlog per instance, start with the ApproximateNumberOfMessages queue attribute to determine the length of the SQS queue (number of messages available for retrieval from the queue). Divide that number by the fleet's running capacity, which for an Auto Scaling group is the number of instances in the InService state, to get the backlog per instance.")]),e._v(" "),a("h2",{attrs:{id:"_2-17-auto-scaling-group-elb-rds-multi-az"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-17-auto-scaling-group-elb-rds-multi-az"}},[e._v("#")]),e._v(" 2/17 Auto Scaling Group & ELB & RDS multi-AZ")]),e._v(" "),a("h2",{attrs:{id:"_3-17-disaster-recovery-plan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-17-disaster-recovery-plan"}},[e._v("#")]),e._v(" 3/17 Disaster Recovery Plan")]),e._v(" "),a("p",[e._v("Warm Standby, RTO in minutes, RPO in seconds.")]),e._v(" "),a("h2",{attrs:{id:"_4-17-aurora-serverless-is-high-performance-auto-scaling-and-cost-effective"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-17-aurora-serverless-is-high-performance-auto-scaling-and-cost-effective"}},[e._v("#")]),e._v(" 4/17 Aurora Serverless is high performance, auto-scaling, and cost-effective.")]),e._v(" "),a("h2",{attrs:{id:"_5-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-17"}},[e._v("#")]),e._v(" 5/17")])])}),[],!1,null,null,null);a.default=r.exports}}]);